<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <template id="pos_discount_script" inherit_id="point_of_sale.index">
            <xpath expr="//head" position="inside">
                <script type="text/javascript">
                    <![CDATA[
                    console.log('🚀 POS Discount Tracker - Final Version Loading...');
                    
                    function waitForPOSAndAddButton() {
                        // Wait for both DOM and POS to be ready
                        if (document.querySelector('.control-buttons')) {
                            console.log('✅ Control buttons found, adding discount button...');
                            addDiscountButton();
                        } else {
                            console.log('⏳ Waiting for POS interface...');
                            setTimeout(waitForPOSAndAddButton, 1000);
                        }
                    }
                    
                    function addDiscountButton() {
                        const controlButtons = document.querySelector('.control-buttons');
                        
                        if (controlButtons && !controlButtons.querySelector('.discount-info-button')) {
                            const discountBtn = document.createElement('button');
                            discountBtn.className = 'btn btn-secondary btn-lg discount-info-button';
                            discountBtn.innerHTML = '<i class="fa fa-percent"></i> Discount Info';
                            discountBtn.style.cssText = 'margin-left: 8px; background-color: #f8f9fa; border-color: #875a7b; color: #875a7b;';
                            
                            discountBtn.onclick = function() {
                                handleDiscountInfo();
                            };
                            
                            controlButtons.appendChild(discountBtn);
                            console.log('✅ Discount Info button added successfully!');
                            
                            // Make button more visible after 2 seconds
                            setTimeout(() => {
                                discountBtn.style.backgroundColor = '#28a745';
                                discountBtn.style.borderColor = '#28a745';
                                discountBtn.style.color = 'white';
                                console.log('✅ Button activated and ready to use!');
                            }, 2000);
                        }
                    }
                    
                    function handleDiscountInfo() {
                        console.log('🎯 Discount Info button clicked!');
                        
                        try {
                            // Try to get POS order and line
                            let order = null;
                            let orderline = null;
                            let posReady = false;
                            
                            if (window.pos && typeof window.pos.get_order === 'function') {
                                order = window.pos.get_order();
                                if (order && typeof order.get_selected_orderline === 'function') {
                                    orderline = order.get_selected_orderline();
                                    posReady = true;
                                }
                            }
                            
                            // Check if we have a selected line with discount
                            if (posReady && orderline) {
                                if (orderline.get_discount() === 0) {
                                    alert('❌ Please apply a discount to the selected product first.');
                                    return;
                                }
                            } else if (posReady) {
                                alert('❌ Please select a product line first.');
                                return;
                            }
                            
                            // Get employee list from POS (enhanced detection)
                            let employees = [];
                            let employeeSource = 'none';
                            
                            if (window.pos) {
                                if (window.pos.employees && window.pos.employees.length > 0) {
                                    employees = window.pos.employees;
                                    employeeSource = 'pos.employees';
                                } else if (window.pos.users && window.pos.users.length > 0) {
                                    employees = window.pos.users;
                                    employeeSource = 'pos.users';
                                } else if (window.pos.user) {
                                    employees = [window.pos.user];
                                    employeeSource = 'pos.user';
                                }
                                
                                console.log('Employee source:', employeeSource, 'Count:', employees.length);
                                if (employees.length > 0) {
                                    console.log('Sample employee:', employees[0]);
                                }
                            }
                            
                            // Fallback: Common employee names for this demo
                            if (employees.length === 0) {
                                employees = [
                                    {id: 1, name: 'Administrator'},
                                    {id: 2, name: 'Manager'},
                                    {id: 3, name: 'Staff Member'},
                                    {id: 4, name: 'Assistant'},
                                    {id: 5, name: 'Supervisor'}
                                ];
                                employeeSource = 'fallback';
                                console.log('Using fallback employee list');
                            }
                            
                            // Get discount information
                            const reason = prompt('💰 DISCOUNT REASON\n\n1. Customer Loyalty\n2. Bulk Order\n3. Insurance Adjustment\n4. Promotional\n5. Staff Discount\n6. Medical Necessity\n7. Other\n\nEnter number (1-7):');
                            
                            if (!reason || reason < 1 || reason > 7) {
                                console.log('❌ Invalid reason selected');
                                return;
                            }
                            
                            // Enhanced employee selection with better UX
                            let requested = '';
                            if (employees && employees.length > 0) {
                                let employeeList = '👤 SELECT EMPLOYEE (Requested By):\n\n';
                                employees.forEach((emp, index) => {
                                    const empName = emp.name || emp.display_name || emp.login || `User ${emp.id}`;
                                    employeeList += `${index + 1}. ${empName}\n`;
                                });
                                employeeList += `\n✏️ Enter number (1-${employees.length}) OR type name manually:`;
                                
                                const empChoice = prompt(employeeList);
                                if (!empChoice) return;
                                
                                const empIndex = parseInt(empChoice) - 1;
                                if (empIndex >= 0 && empIndex < employees.length) {
                                    const selectedEmp = employees[empIndex];
                                    requested = selectedEmp.name || selectedEmp.display_name || selectedEmp.login || `User ${selectedEmp.id}`;
                                } else {
                                    requested = empChoice.trim();
                                }
                            } else {
                                requested = prompt('👤 Requested By (Employee Name):\n\nSuggestions: Administrator, Manager, Staff, Assistant');
                            }
                            
                            if (!requested || !requested.trim()) {
                                console.log('❌ No employee name provided');
                                return;
                            }
                            
                            // Enhanced manager selection  
                            let approved = '';
                            if (employees && employees.length > 0) {
                                let managerList = '✅ SELECT MANAGER (Approved By):\n\n';
                                employees.forEach((emp, index) => {
                                    const empName = emp.name || emp.display_name || emp.login || `User ${emp.id}`;
                                    managerList += `${index + 1}. ${empName}\n`;
                                });
                                managerList += `\n✏️ Enter number (1-${employees.length}) OR type name manually:`;
                                
                                const mgrChoice = prompt(managerList);
                                if (!mgrChoice) return;
                                
                                const mgrIndex = parseInt(mgrChoice) - 1;
                                if (mgrIndex >= 0 && mgrIndex < employees.length) {
                                    const selectedMgr = employees[mgrIndex];
                                    approved = selectedMgr.name || selectedMgr.display_name || selectedMgr.login || `User ${selectedMgr.id}`;
                                } else {
                                    approved = mgrChoice.trim();
                                }
                            } else {
                                approved = prompt('✅ Approved By (Manager Name):\n\nSuggestions: Administrator, Manager, Supervisor');
                            }
                            
                            // Process data
                            const reasonValues = ['', 'customer_loyalty', 'bulk_order', 'insurance_adjustment', 'promotional', 'staff_discount', 'medical_necessity', 'other'];
                            const reasonLabels = ['', 'Customer Loyalty', 'Bulk Order', 'Insurance Adjustment', 'Promotional', 'Staff Discount', 'Medical Necessity', 'Other'];
                            
                            const reasonValue = reasonValues[reason];
                            const reasonLabel = reasonLabels[reason];
                            const requestedName = requested.trim();
                            const approvedName = approved.trim();
                            
                            // Save data if POS is ready
                            if (posReady && orderline) {
                                // Save to custom fields
                                orderline.discount_reason = reasonValue;
                                orderline.discount_requested_by = requestedName;
                                orderline.discount_approved_by = approvedName;
                                
                                // Create a clean discount info line for the note
                                const discountInfo = `💰 DISCOUNT: ${reasonLabel} | 👤 Req: ${requestedName} | ✅ App: ${approvedName}`;
                                
                                // Get current note and add discount info
                                const currentNote = orderline.get_note() || '';
                                
                                // Remove any existing discount info to avoid duplicates
                                const cleanNote = currentNote.replace(/💰 DISCOUNT:.*$/gm, '').replace(/\[DISCOUNT:.*?\]/g, '').trim();
                                
                                // Add the new discount info
                                const newNote = cleanNote ? cleanNote + '\n' + discountInfo : discountInfo;
                                orderline.set_note(newNote);
                                
                                console.log('💾 DATA SAVED TO DATABASE AND NOTE!', {
                                    product: orderline.get_product().display_name,
                                    discount: orderline.get_discount() + '%',
                                    reason: reasonLabel,
                                    requested_by: requestedName,
                                    approved_by: approvedName,
                                    note_updated: true
                                });
                                
                                alert('✅ DISCOUNT INFORMATION SAVED!\n\n📋 Product: ' + orderline.get_product().display_name + '\n💰 Discount: ' + orderline.get_discount() + '%\n🏷️ Reason: ' + reasonLabel + '\n👤 Requested by: ' + requestedName + '\n✅ Approved by: ' + approvedName + '\n\n💾 Saved to database\n📝 Visible in customer note below');
                                
                            } else {
                                // Fallback mode
                                console.log('📝 FALLBACK MODE - Data collected:', {
                                    reason: reasonLabel,
                                    requested_by: requestedName,
                                    approved_by: approvedName
                                });
                                
                                alert('✅ DISCOUNT INFORMATION COLLECTED!\n\n🏷️ Reason: ' + reasonLabel + '\n👤 Requested by: ' + requestedName + '\n✅ Approved by: ' + approvedName + '\n\n⚠️ POS not fully ready - data shown in console\n(Select a product with discount and try again for full integration)');
                            }
                            
                        } catch (error) {
                            console.error('❌ Error in discount handler:', error);
                            alert('❌ An error occurred while processing discount information. Please try again.');
                        }
                    }
                    
                    // Auto-start when page loads
                    document.addEventListener('DOMContentLoaded', function() {
                        console.log('📄 DOM loaded, initializing POS Discount Tracker...');
                        setTimeout(waitForPOSAndAddButton, 1000);
                    });
                    
                    // Also try when window loads
                    window.addEventListener('load', function() {
                        console.log('🌐 Window loaded, starting discount tracker...');
                        setTimeout(waitForPOSAndAddButton, 2000);
                    });
                    
                    // Periodic check to ensure button stays available
                    setInterval(function() {
                        if (document.querySelector('.control-buttons') && !document.querySelector('.discount-info-button')) {
                            console.log('🔄 Re-adding discount button...');
                            addDiscountButton();
                        }
                    }, 5000);
                    ]]>
                </script>
            </xpath>
        </template>
    </data>
</odoo>