<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <template id="pos_discount_script" inherit_id="point_of_sale.index">
            <xpath expr="//head" position="inside">
                <script type="text/javascript">
                    <![CDATA[
                    console.log('POS Discount Tracker - Clean Version');
                    
                    function handleDiscountClick() {
                        console.log('Clean discount handler starting...');
                        
                        try {
                            // Get discount reason first
                            const reason = prompt('Discount Reason:\n\n1. Customer Loyalty\n2. Bulk Order\n3. Promotional\n4. Staff Discount\n5. Other\n\nEnter 1-5:');
                            if (!reason || reason < 1 || reason > 5) return;
                            
                            // Get employees from database
                            let employees = [];
                            let pos = window.pos;
                            
                            if (pos && pos.pos_employees) {
                                employees = pos.pos_employees;
                                console.log('Using database employees:', employees.length);
                            } else if (pos && pos.partners) {
                                employees = pos.partners.filter(p => !p.is_company && (p.email || p.function)).slice(0, 20);
                                console.log('Using partner fallback:', employees.length);
                            } else {
                                employees = [
                                    {id: 1, name: 'Administrator', display_name: 'Administrator (System Admin)', function: 'System Admin'},
                                    {id: 2, name: 'Manager', display_name: 'Manager (Store Manager)', function: 'Store Manager'},
                                    {id: 3, name: 'Staff Member', display_name: 'Staff Member (Sales)', function: 'Sales'},
                                    {id: 4, name: 'Supervisor', display_name: 'Supervisor (Floor Supervisor)', function: 'Floor Supervisor'}
                                ];
                                console.log('Using fallback employees');
                            }
                            
                            // Enhanced employee selection
                            function selectEmployee(title) {
                                let employeeList = `${title}:\n\n`;
                                
                                const displayEmployees = employees.slice(0, 15);
                                displayEmployees.forEach((emp, index) => {
                                    const displayName = emp.display_name || emp.name;
                                    employeeList += `${index + 1}. ${displayName}\n`;
                                });
                                
                                employeeList += '\nEnter number (1-' + displayEmployees.length + ') or type name:';
                                
                                const choice = prompt(employeeList);
                                if (!choice) return null;
                                
                                // Handle number selection
                                const empIndex = parseInt(choice) - 1;
                                if (empIndex >= 0 && empIndex < displayEmployees.length) {
                                    return displayEmployees[empIndex];
                                }
                                
                                // Handle manual name entry
                                if (choice.trim()) {
                                    return {
                                        id: null,
                                        name: choice.trim(),
                                        display_name: choice.trim(),
                                        function: 'Manual Entry'
                                    };
                                }
                                
                                return null;
                            }
                            
                            // Select employees
                            const requestedEmployee = selectEmployee('SELECT REQUESTING EMPLOYEE');
                            if (!requestedEmployee) return;
                            
                            const approvedEmployee = selectEmployee('SELECT APPROVING MANAGER');
                            if (!approvedEmployee) return;
                            
                            // Process the data
                            const reasons = ['', 'customer_loyalty', 'bulk_order', 'promotional', 'staff_discount', 'other'];
                            const reasonLabels = ['', 'Customer Loyalty', 'Bulk Order', 'Promotional', 'Staff Discount', 'Other'];
                            
                            const discountData = {
                                reason: reasons[reason],
                                reasonLabel: reasonLabels[reason],
                                requestedEmployee: requestedEmployee,
                                approvedEmployee: approvedEmployee,
                                timestamp: new Date().toISOString()
                            };
                            
                            console.log('Clean discount data:', discountData);
                            
                            // Save to POS for backend processing
                            let savedToBackend = false;
                            try {
                                if (pos && pos.get_order) {
                                    const order = pos.get_order();
                                    if (order && order.orderlines) {
                                        for (let line of order.orderlines) {
                                            if (line.get_discount && line.get_discount() > 0) {
                                                line.discount_reason = discountData.reason;
                                                line.discount_requested_by = requestedEmployee.name;
                                                line.discount_approved_by = approvedEmployee.name;
                                                line.discount_requested_by_id = requestedEmployee.id;
                                                line.discount_approved_by_id = approvedEmployee.id;
                                                line.discount_timestamp = discountData.timestamp;
                                                
                                                savedToBackend = true;
                                                console.log('Saved to POS orderline for backend processing');
                                                break;
                                            }
                                        }
                                    }
                                }
                            } catch (e) {
                                console.log('Backend save failed:', e);
                            }
                            
                            // Update interface display - position above Total
                            updateCleanDisplay(discountData);
                            
                            // Show success message
                            const backendStatus = savedToBackend ? 
                                'SAVED TO DATABASE!' : 
                                'Will be saved to database when order is completed.';
                            
                            alert(`SUCCESS! ${backendStatus}\n\nReason: ${discountData.reasonLabel}\nRequested by: ${requestedEmployee.display_name}\nApproved by: ${approvedEmployee.display_name}\n\nThis information is now saved to the database.`);
                            
                        } catch (error) {
                            console.error('Clean handler error:', error);
                            alert('Error: ' + error.message);
                        }
                    }
                    
                    function updateCleanDisplay(discountData) {
                        console.log('Updating clean display above Total');
                        
                        // Remove any existing discount info
                        const existing = document.querySelectorAll('.clean-discount-info');
                        existing.forEach(el => el.remove());
                        
                        // Create clean display text without emojis
                        const linkedIndicator = discountData.requestedEmployee.id ? ' (Database Linked)' : '';
                        const displayText = `${discountData.reasonLabel} | Requested: ${discountData.requestedEmployee.name} | Approved: ${discountData.approvedEmployee.name}${linkedIndicator}`;
                        
                        // Find the Total element and add discount info above it
                        setTimeout(() => {
                            // Look for Total amount element
                            const totalElements = document.querySelectorAll('*');
                            let totalElement = null;
                            
                            for (let el of totalElements) {
                                if (el.textContent && el.textContent.includes('Total:') && el.textContent.includes('$')) {
                                    totalElement = el;
                                    break;
                                }
                            }
                            
                            if (totalElement) {
                                const discountDiv = document.createElement('div');
                                discountDiv.className = 'clean-discount-info';
                                discountDiv.style.cssText = `
                                    background-color: #e3f2fd;
                                    color: #1976d2;
                                    padding: 8px 12px;
                                    margin: 5px 0;
                                    border-left: 4px solid #1976d2;
                                    font-size: 13px;
                                    font-weight: 500;
                                    border-radius: 4px;
                                    line-height: 1.4;
                                `;
                                discountDiv.innerHTML = `DISCOUNT INFO: ${displayText}`;
                                
                                // Insert before the Total element
                                totalElement.parentNode.insertBefore(discountDiv, totalElement);
                                console.log('Clean display added above Total');
                            } else {
                                // Fallback: add to order container
                                const orderContainer = document.querySelector('.order, .orderlines, [class*="order"]');
                                if (orderContainer) {
                                    const discountDiv = document.createElement('div');
                                    discountDiv.className = 'clean-discount-info';
                                    discountDiv.style.cssText = `
                                        background-color: #e3f2fd;
                                        color: #1976d2;
                                        padding: 8px 12px;
                                        margin: 5px;
                                        border-left: 4px solid #1976d2;
                                        font-size: 13px;
                                        font-weight: 500;
                                        border-radius: 4px;
                                        text-align: center;
                                    `;
                                    discountDiv.innerHTML = `DISCOUNT INFO: ${displayText}`;
                                    
                                    orderContainer.appendChild(discountDiv);
                                    console.log('Clean display added to order container');
                                }
                            }
                        }, 300);
                    }
                    
                    // Add clean button (only in control panel, not at bottom)
                    function addCleanButton() {
                        // Only add to main control buttons area
                        const containers = document.querySelectorAll('.control-buttons');
                        
                        containers.forEach(container => {
                            // Skip if this is the bottom container (has payment button nearby)
                            const hasPayment = container.closest('*').textContent && 
                                              container.closest('*').textContent.includes('Payment');
                            
                            if (!hasPayment && !container.querySelector('.clean-discount-btn')) {
                                const btn = document.createElement('button');
                                btn.className = 'btn clean-discount-btn';
                                btn.innerHTML = 'Discount Info';
                                btn.style.cssText = `
                                    margin: 4px; 
                                    padding: 10px 15px; 
                                    font-weight: bold; 
                                    background: linear-gradient(45deg, #1976d2, #2196f3) !important;
                                    border: none !important;
                                    color: white !important;
                                    border-radius: 6px;
                                    cursor: pointer;
                                    font-size: 12px;
                                `;
                                
                                btn.onclick = handleDiscountClick;
                                container.appendChild(btn);
                                console.log('Clean button added to main control area');
                            }
                        });
                        
                        // Remove any bottom buttons
                        const bottomButtons = document.querySelectorAll('[class*="discount"] button');
                        bottomButtons.forEach(btn => {
                            if (btn.closest('.control-buttons') && 
                                btn.closest('.control-buttons').textContent.includes('Payment')) {
                                btn.remove();
                                console.log('Removed bottom discount button');
                            }
                        });
                    }
                    
                    // Initialize clean system
                    setTimeout(addCleanButton, 1000);
                    setInterval(addCleanButton, 5000);
                    
                    document.addEventListener('DOMContentLoaded', () => setTimeout(addCleanButton, 2000));
                    window.addEventListener('load', () => setTimeout(addCleanButton, 3000));
                    
                    console.log('Clean POS Discount Tracker ready!');
                    ]]>
                </script>
            </xpath>
        </template>
    </data>
</odoo>